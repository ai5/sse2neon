#include <gtest/gtest.h>

#ifdef _WIN32
#include <smmintrin.h>
#define USE_SSE42
#include "sse_emulate.h"
#else
#include "SSE2NEON.h"
#endif

#include "format.h"

#define SSE_EMU_TEST SSE2NEONTest
#include "sse_emu_test.cpp"

TEST(SSE2NEONTest, _mm_or_si128_test)
{
	ASSERT_EQ(_mm_or_si128(
		vU64(0x1020304050607080, 0x0807060504030201),
		vU64(0x0102030405060708, 0x8070605040302010))
	==	vU64(0x1122334455667788, 0x8877665544332211), true);
}

TEST(SSE2NEONTest, _mm_and_si128_test)
{
	ASSERT_EQ(_mm_and_si128(
		vU64(0x1020304050607080, 0x0807060504030201),
		vU64(0x0102030405060708, 0x8070605040302010))
		== vU64(0, 0), true);

	ASSERT_EQ(_mm_and_si128(
		vU64(0x1020304050607080, 0x0807060504030201),
		vU64(0xf0f000f000f000f0, 0x0f0f0f0f0f0f0f0f))
	==  vU64(0x1020004000600080, 0x0807060504030201), true);

}

TEST(SSE2NEONTest, _mm_xor_si128_test)
{
	ASSERT_EQ(_mm_xor_si128(
		vU64(0x1020304050607080, 0x0807060504030201),
		vU64(0xffffffffffffffff, 0xffffffffffffffff))
	 == vU64(0xefdfcfbfaf9f8f7f, 0xf7f8f9fafbfcfdfe), true);
}

TEST(SSE2NEONTest, _mm_andnot_si128_test)
{
	ASSERT_EQ(_mm_andnot_si128(
		vU64(0x1020304050607080, 0x0807060504030201),
		vU64(0xffffffffffffffff, 0xffffffffffffffff))
		== vU64(0xefdfcfbfaf9f8f7f, 0xf7f8f9fafbfcfdfe), true);
}

TEST(SSE2NEONTest, _mm_set_epi8_test)
{
	ASSERT_EQ(_mm_set_epi8(0xf, 0xe, 0xd, 0xc, 0xb, 0xa, 0x9, 0x8, 0x7, 0x6, 0x5, 0x4, 0x3, 0x2, 0x1, 0x0)==
		vU64(0x0f0e0d0c0b0a0908, 0x0706050403020100), true);

}

TEST(SSE2NEONTest, _mm_set1_epi8_test)
{
	ASSERT_EQ(_mm_set1_epi8(0xc) ==
		vU64(0x0c0c0c0c0c0c0c0c, 0x0c0c0c0c0c0c0c0c), true);
}

TEST(SSE2NEONTest, _mm_set_epi16_test)
{
	ASSERT_EQ(_mm_set_epi16(0x7, 0x6, 0x5, 0x4, 0x3, 0x2, 0x1, 0x0) ==
		vU64(0x0007000600050004, 0x0003000200010000), true);
}

TEST(SSE2NEONTest, _mm_set1_epi16_test)
{
	ASSERT_EQ(_mm_set1_epi16(0x1234) ==
		vU64(0x1234123412341234, 0x1234123412341234), true);
}

TEST(SSE2NEONTest, _mm_setzero_si128_test)
{
	ASSERT_EQ(_mm_setzero_si128() == vU64(0x0, 0x0), true);
}

//////////////

TEST(SSE2NEONTest, _mm_cmpeq_epi8_test)
{
	ASSERT_EQ(_mm_cmpeq_epi8(
		vU8(0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00),
		vU8(0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00))
		== vU8(0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff), true);

	ASSERT_EQ(_mm_cmpeq_epi8(
		vU8(0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00),
		vU8(0x00, 0x0e, 0x0d, 0xc0, 0xab, 0x0a, 0x09, 0x10, 0x07, 0x66, 0xf5, 0x04, 0x03, 0x22, 0x01, 0x00))
	 == vU8(0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff), true);

}

TEST(SSE2NEONTest, _mm_cmpgt_epi8_test)
{
	ASSERT_EQ(_mm_cmpgt_epi8(
		   vS8(  -1, 11,    0,  124,  125, -124, -125,  100,   11, -31, 10, -124, -125,  124,  125, -100),
		   vS8(  -1, 22,    0,    0,  123, -123, -100, -100,   11, -22, 10,    0, -123,  123,  100,  100))
		== vU8(   0,  0,    0, 0xFF, 0xFF,    0,    0, 0xFF,    0,   0,  0,    0,    0, 0xFF, 0xFF,    0), true);
}

TEST(SSE2NEONTest, _mm_cmpeq_epi16_test)
{
	ASSERT_EQ(_mm_cmpgt_epi8(
		vS16(-1, 11, 0, 124, 125, -124, -125, 100),
		vS16(-1, 22, 0, 0, 123, -123, -100, -100))
		== vU16(0, 0, 0, 0xFFFF, 0xFFFF, 0, 0, 0xFFFF), true);
}

////////////////

TEST(SSE2NEONTest, _mm_slli_si128_test)
{
	__m128i a = vU64(0x1020304050607080, 0x0807060504030201);

	ASSERT_EQ(_mm_slli_si128(a, 1) == vU64(0x2030405060708008, 0x0706050403020100), true);
	ASSERT_EQ(_mm_slli_si128(a, 2) == vU64(0x3040506070800807, 0x0605040302010000), true);
	ASSERT_EQ(_mm_slli_si128(a, 5) == vU64(0x6070800807060504, 0x0302010000000000), true);

}

TEST(SSE2NEONTest, _mm_srli_si128_test)
{
	__m128i a = vU64(0x1020304050607080, 0x0807060504030201);
	ASSERT_EQ(_mm_srli_si128(a, 1) == vU64(0x0010203040506070, 0x8008070605040302), true);
	ASSERT_EQ(_mm_srli_si128(a, 2) == vU64(0x0000102030405060, 0x7080080706050403), true);
	ASSERT_EQ(_mm_srli_si128(a, 5) == vU64(0x0000000000102030, 0x4050607080080706), true);
}

TEST(SSE2NEONTest, _mm_slli_epi64_test)
{
	__m128i a = vU64(0x1020304050607080, 0x0807060504030201);

	ASSERT_EQ(_mm_slli_epi64(a, 8) == vU64(0x2030405060708000, 0x0706050403020100), true);
	ASSERT_EQ(_mm_slli_epi64(a, 16) == vU64(0x3040506070800000, 0x0605040302010000), true);
	ASSERT_EQ(_mm_slli_epi64(a, 40) == vU64(0x6070800000000000, 0x0302010000000000), true);

}

TEST(SSE2NEONTest, _mm_srli_epi64_test)
{
	__m128i a = vU64(0x1020304050607080, 0x0807060504030201);
	ASSERT_EQ(_mm_srli_epi64(a, 8) == vU64(0x0010203040506070, 0x0008070605040302), true);
	ASSERT_EQ(_mm_srli_epi64(a, 16) == vU64(0x0000102030405060, 0x0000080706050403), true);
	ASSERT_EQ(_mm_srli_epi64(a, 40) == vU64(0x0000000000102030, 0x0000000000080706), true);
}

TEST(SSE2NEONTest, _mm_slli_epi16_test)
{
	__m128i a = vU16(0x1020, 0x3040, 0x5060, 0x7080, 0x8070, 0x0605, 0x0403, 0x0201);
	ASSERT_EQ(_mm_slli_epi16(a, 4) == vU16(0x0200, 0x0400, 0x0600, 0x0800, 0x0700, 0x6050, 0x4030, 0x2010), true);
}

////

TEST(SSE2NEONTest, _mm_movemask_epi8_test)
{
	ASSERT_EQ(_mm_movemask_epi8(vU8(0x80, 0x40, 0x20, 0x10, 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0xa0, 0xb0, 0xc0)), 0x800f);
}


TEST(SSE2NEONTest, _mm_min_epu8_test)
{
	ASSERT_EQ(_mm_min_epu8(
		vU8(0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00),
		vU8(0x00, 0x0e, 0x0d, 0xc0, 0xab, 0x0a, 0x09, 0x10, 0x07, 0x66, 0xf5, 0x04, 0x03, 0x22, 0x01, 0x00))
     == vU8(0x00, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00), true);

}

TEST(SSE2NEONTest, _mm_add_epi16_test)
{
	ASSERT_EQ(_mm_add_epi16(
		vU16(0x1234, 0x4321, 0x8765, 0x5678, 0x0000, 0xffff, 0xfedc, 0xabcd),
		vU16(0x4321, 0x8765, 0x5678, 0x1234, 0x0000, 0xffff, 0x0000, 0x1234))
	 == vU16(0x5555, 0xCA86, 0xDDDD, 0x68AC, 0x0000, 0xfffe, 0xfedc, 0xBE01), true);
}

TEST(SSE2NEONTest, _mm_add_epi8_test)
{
	ASSERT_EQ(_mm_add_epi8(
		vU8(0x12, 0x34, 0x43, 0x21, 0x87, 0x65, 0x56, 0x78, 0x00, 0x00, 0xff, 0xff, 0xfe, 0xdc, 0xab, 0xcd),
		vU8(0x43, 0x21, 0x87, 0x65, 0x56, 0x78, 0x12, 0x34, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x12, 0x34))
	 == vU8(0x55, 0x55, 0xCA, 0x86, 0xDD, 0xDD, 0x68, 0xAC, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0xdc, 0xBD, 0x01), true);
}

TEST(SSE2NEONTest, _mm_subs_epu8_test)
{
	ASSERT_EQ(_mm_subs_epu8(
		vU8(0x12, 0x34, 0x43, 0x21, 0x87, 0x65, 0x56, 0x78, 0x00, 0x00, 0xff, 0xff, 0xfe, 0xdc, 0xab, 0xcd),
		vU8(0x43, 0x21, 0x87, 0x65, 0x56, 0x78, 0x12, 0x34, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x12, 0x34))
		== vU8(0x00, 0x13, 0x00, 0x00, 0x31, 0x00, 0x44, 0x44, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xdc, 0x99, 0x99), true);
}

TEST(SSE2NEONTest, _mm_sub_epi8_test)
{
	ASSERT_EQ(_mm_sub_epi8(
		vU8(0x12, 0x34, 0x43, 0x21, 0x87, 0x65, 0x56, 0x78, 0x00, 0x00, 0xff, 0xff, 0xfe, 0xdc, 0xab, 0xcd),
		vU8(0x43, 0x21, 0x87, 0x65, 0x56, 0x78, 0x12, 0x34, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x12, 0x34))
		== vU8(0xcf, 0x13, 0xbc, 0xbc, 0x31, 0xed, 0x44, 0x44, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xdc, 0x99, 0x99), true);

}

TEST(SSE2NEONTest, _mm_loadu_si128_test)
{
	uint8_t aa[16] = { 0x12, 0x34, 0x43, 0x21, 0x87, 0x65, 0x56, 0x78, 0x00, 0x00, 0xff, 0xff, 0xfe, 0xdc, 0xab, 0xcd };

	ASSERT_EQ(_mm_loadu_si128((__m128i*)aa) == vU8(0xcd, 0xab, 0xdc, 0xfe, 0xff, 0xff, 0x00, 0x00, 0x78, 0x56, 0x65, 0x87, 0x21, 0x43, 0x34, 0x12), true);
}

TEST(SSE2NEONTest, _mm_storeu_si128_test)
{
	uint8_t aa[16];

	_mm_storeu_si128((__m128i*)aa, vU8(0xcd, 0xab, 0xdc, 0xfe, 0xff, 0xff, 0x00, 0x00, 0x78, 0x56, 0x65, 0x87, 0x21, 0x43, 0x34, 0x12));
	ASSERT_EQ(memcmp(&aa, &vU8(0xcd, 0xab, 0xdc, 0xfe, 0xff, 0xff, 0x00, 0x00, 0x78, 0x56, 0x65, 0x87, 0x21, 0x43, 0x34, 0x12), sizeof(__m128i)), 0);
}

TEST(SSE2NEONTest, _mm_movpi64_epi64_test)
{
	sse_m128 tmp;
	tmp.u64[0] = 0x123456789abcdef0;
	__m128i a = _mm_movpi64_epi64(tmp.m64[0]);
	_mm_empty();
	ASSERT_EQ( a == vU64(0x0, 0x123456789abcdef0), true);
	
}
